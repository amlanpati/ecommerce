### git

git init
git add .
git status
git commit -m ""
git push -u origin main


### api

Step-1: npm init
	(package name: ecommerce-api)

Step-2: npm install express
	npm install -D typescript tsx @types/express

Step-3: Create tsconfig.json
	Add this:
{
  "compilerOptions": {
    "module": "ESNext", // Use ESNext for ESM
    "target": "ES2020", // Target modern ECMAScript versions
    "moduleResolution": "node",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "outDir": "./dist", // Output directory for compiled files
    "strict": true, // Enable strict type-checking options
    "skipLibCheck": true, // Skip type checking of declaration files
    "resolveJsonModule": true, // Include JSON imports
    "forceConsistentCasingInFileNames": true,
    "noEmit": false, // Allow emitting output
    "isolatedModules": true, // Required for using ESM modules
    "baseUrl": ".", // Allow absolute imports relative to project root
    "paths": {
      "*": ["node_modules/*"]
    }
  }
}

Step-4: Create src/index.ts
	Create "Hello World" using express

Step-5: Add "type": "module", in package.json
	Add these scripts to package.json: 
	"dev": "node --import=tsx --watch --env-file=.env src/index.ts", 
	"build": "tsc"

Step-6: npm i drizzle-orm postgres dotenv
	npm i -D drizzle-kit tsx

Step-7: Create db/index.ts and db/productsSchema.ts

Step-8: Create drizzle.config.ts
	Add schema in an array
	Add these to defineConfig:
	verbose: true,
  	strict: true,

Step-9: npx drizzle-kit push (for quickly testing new schema designs)
	Check table by npx drizzle-kit studio
	Alternatively use: 
	npx drizzle-kit generate
	npx drizzle-kit migrate
Step-10: Add these scripts to package.json:
	"db:generate": "drizzle-kit generate",
    	"db:migrate": "drizzle-kit migrate",
    	"db:studio": "drizzle-kit studio"

Step-11: Add productsController.ts logic

Step-12: npm i zod
	 npm i drizzle-zod
	 npm i lodash
	 npm i --save-dev @types/lodash

Step-13: Create src/middlewares/validationMiddleware.ts

import { Request, Response, NextFunction } from 'express';
import { z, ZodError } from 'zod';

export function validateData(schema: z.ZodObject<any, any>) {
  return (req: Request, res: Response, next: NextFunction) => {
    try {
      schema.parse(req.body);
      next();
    } catch (error) {
      if (error instanceof ZodError) {
        const errorMessages = error.errors.map((issue: any) => ({
          message: `${issue.path.join('.')} is ${issue.message}`,
        }));
        res.status(400).json({ error: 'Invalid data', details: errorMessages });
      } else {
        res.status(500).json({ error: 'Internal Server Error' });
      }
    }
  };
}

Step-14: Create src/types/express/index.d.ts

// to make the file a module and avoid the TypeScript error
export {};

declare global {
  namespace Express {
    export interface Request {
      userId?: Number;
      cleanBody?: any
    }
  }
}

Step-15: Create src/db/usersSchema.ts
	 Add schema in an array to drizzle.config.ts
	 db:generate
	 db:migrate

	 * TABLE IF NOT EXISTS

Step-16: Create src/routes/auth/index.ts

Step-17: npm install bcryptjs
	 npm i --save-dev @types/bcryptjs
	 npm install jsonwebtoken
	 npm i --save-dev @types/jsonwebtoken

Step-18: Create src/middlewares/authMiddleware.ts




### ecommerce-mobile

## Initial Setup
Step-1: npx create-expo-app@latest <app-name> --template
	(Select blank typescript)
# Install dependencies
Step-2: cd <app-name>
Step-3: npm start
Step-4: npx expo install expo-router react-native-safe-area-context react-native-screens expo-linking expo-constants expo-status-bar
# Setup entry point in package.json {"main": "expo-router/entry"}
# Add scheme in app.json {"scheme": "ecommerce-app"}
Step-5: npx expo install react-native-web react-dom
Step-6: npx expo start or npx expo start --tunnel or npx expo start --clear

## Adding gluestack UI
npx gluestack-ui init  
npx gluestack-ui add card
npx gluestack-ui add image text vstack heading box
npx gluestack-ui add useBreakPointValue